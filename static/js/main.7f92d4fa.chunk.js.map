{"version":3,"sources":["Card.js","CardList.js","Search.js","Scroll.js","App.js","serviceWorker.js","index.js"],"names":["Card","id","name","email","className","alt","src","CardList","robots","CardArray","map","user","i","SearchBox","SearchChange","type","onChange","placeholder","Scroll","props","style","overflowY","height","children","App","Searched","event","setState","SearchField","target","value","state","fetch","then","response","json","users","filteredRobots","this","filter","toLowerCase","includes","length","Search","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yOA4BeA,G,MAzBF,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,GAAIC,EAAe,EAAfA,KAAMC,EAAS,EAATA,MAcrB,OACI,yBAAKC,UAAU,QACX,yBAAKA,UAAU,aACf,yBAAKC,IAAI,SAASC,IAAG,+BAA0BL,EAA1B,cACrB,2BAAIC,GACJ,2BAAIC,OCLDI,EAdE,SAAC,GAAa,IAAZC,EAAW,EAAXA,OACTC,EAAYD,EAAOE,KAAI,SAACC,EAAMC,GAChC,OACJ,6BACA,kBAAC,EAAD,CAAMX,GAAIO,EAAOI,GAAGX,GAAIC,KAAOM,EAAOI,GAAGV,KAAMC,MAASK,EAAOI,GAAGT,YAIlE,OACI,6BACDM,ICLQI,EANE,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,aAChB,OACI,2BAAOC,KAAK,SAASd,GAAG,SAASe,SAAUF,EAAcG,YAAY,uBCO9DC,EATA,SAACC,GACZ,OACI,yBAAKC,MAAO,CAACC,UAAU,SAAUC,OAAO,UACnCH,EAAMI,WCqDJC,E,YAhDX,aAAc,IAAD,8BACb,+CAiBCC,SAAW,SAACC,GACL,EAAKC,SAAS,CAACC,YAAYF,EAAMG,OAAOC,SAfhD,EAAKC,MAAO,CACRvB,OAAQ,GACRoB,YAAa,IANJ,E,iFAUO,IAAD,OACfI,MAAM,8CACLC,MAAM,SAAAC,GAAQ,OAAIA,EAASC,UAE3BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAACnB,OAAQ4B,S,+BAWjC,IAAD,OACEC,EAAiBC,KAAKP,MAAMvB,OAAO+B,QAAO,SAAA/B,GAC5C,OAAOA,EAAON,KAAKsC,cAAcC,SAAS,EAAKV,MAAMH,YAAYY,kBAEzE,OAAgC,IAA5BF,KAAKP,MAAMvB,OAAOkC,OACH,wBAAItC,UAAU,WAAd,cAKX,yBAAKA,UAAU,OACf,2CACA,kBAACuC,EAAD,CAAW7B,aAAgBwB,KAAKb,WAChC,6BACA,kBAAC,EAAD,KACA,kBAAC,EAAD,CAAUjB,OAAU6B,U,GA1CdO,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAQ,kBAAC,EAAD,MAAcC,SAASC,eAAe,SD2HjD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvB,MAAK,SAAAwB,GACjCA,EAAaC,iB","file":"static/js/main.7f92d4fa.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Card.css';\r\n\r\nconst Card = ({id, name, email})=>{\r\n    /*another way to write this is by doing destructuring\r\n    const Card =({props}){\r\n        const {id, name, email} = props;\r\n        return(   \r\n            <div className='main'>\r\n            <div className='container'>\r\n            <img alt='robots' src={`https://robohash.org/${id}?200x200`} />\r\n            <p>{name}</p>\r\n            <p>{email}</p>\r\n            </div>\r\n        </div>);\r\n    }\r\n    */\r\n    return(\r\n        <div className='main'>\r\n            <div className='container'>\r\n            <img alt='robots' src={`https://robohash.org/${id}?200x200`} />\r\n            <p>{name}</p>\r\n            <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({robots}) =>{\r\n    const CardArray = robots.map((user, i)=>{\r\n        return (\r\n    <div>\r\n    <Card id={robots[i].id} name ={robots[i].name} email = {robots[i].email} />\r\n    </div>)\r\n     });\r\n        \r\n    return(\r\n        <div>\r\n      {CardArray}\r\n      </div>);\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox =({ SearchChange}) =>{\r\n    return(\r\n        <input type=\"search\" id=\"search\" onChange={SearchChange} placeholder=\" Search Robots...\" />\r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props)=>{\r\n    return(\r\n        <div style={{overflowY:'scroll', height:'500px'}}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default Scroll;","// import important and revelevant components here\r\nimport React, {Component} from 'react';\r\nimport CardList from './CardList';\r\nimport SearchBox from './Search';\r\nimport Scroll from './Scroll';\r\n\r\n\r\n// Create class here because this is the parent component of the app\r\nclass App extends Component {\r\n    //constructor as every componet has\r\n    constructor(){\r\n    super()\r\n    // declare the states. the state are the dynamic variables of an app\r\n    // the state of the app is empty at the start of the app\r\n    this.state ={\r\n        robots: [],\r\n        SearchField: ''\r\n    }}\r\n\r\n    //works after the app has been loaded first\r\n    componentDidMount(){\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then (response => response.json())\r\n            \r\n        .then(users => this.setState({robots: users}));\r\n    }\r\n\r\n    //instance  where the state variable is changed\r\n     Searched = (event)=>{\r\n            this.setState({SearchField:event.target.value});\r\n            \r\n            }\r\n    \r\n    \r\n    // this is what is displayed on the app\r\n    render(){ \r\n        const filteredRobots = this.state.robots.filter(robots=>{\r\n            return robots.name.toLowerCase().includes(this.state.SearchField.toLowerCase());}) \r\n                  \r\n    if (this.state.robots.length ===0){\r\n                return(<h1 className=\"loading\">loading...</h1>);\r\n               }\r\n    else{     \r\n        return(\r\n         //if still loading  \r\n            <div className=\"app\">\r\n            <h1>Robofriends</h1>\r\n            <SearchBox SearchChange = {this.Searched} />\r\n            <hr />\r\n            <Scroll>\r\n            <CardList robots = {filteredRobots} />\r\n            </Scroll>\r\n            </div>\r\n\r\n        );\r\n}}}\r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render( <App ></App>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}